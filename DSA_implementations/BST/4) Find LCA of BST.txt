#LCA (LEETCODE)
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        temp = root
        while temp:
            if p.val>temp.val and q.val>temp.val:
                temp = temp.right
            elif p.val<temp.val and q.val<temp.val:
                temp = temp.left
            else:
                return temp


#LCA (CHATGPT)
class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

def findLCA(root, node1, node2):
    if root is None:
        return None

    # If both nodes are smaller, LCA is in the left subtree
    if node1 < root.key and node2 < root.key:
        return findLCA(root.left, node1, node2)

    # If both nodes are larger, LCA is in the right subtree
    if node1 > root.key and node2 > root.key:
        return findLCA(root.right, node1, node2)

    # Otherwise, the current node is the LCA
    return root.key

# Example usage:
root = Node(6)
root.left = Node(2)
root.right = Node(8)
root.left.left = Node(0)
root.left.right = Node(4)
root.right.left = Node(7)
root.right.right = Node(9)
root.left.right.left = Node(3)
root.left.right.right = Node(5)

node1 = 2
node2 = 4
lca = findLCA(root, node1, node2)

print("Lowest Common Ancestor of", node1, "and", node2, "is:", lca)
